[{"/home/ubuntu/environment/brick-game-champ/src/index.js":"1","/home/ubuntu/environment/brick-game-champ/src/App.js":"2","/home/ubuntu/environment/brick-game-champ/src/reportWebVitals.js":"3","/home/ubuntu/environment/brick-game-champ/src/aws-exports.js":"4"},{"size":607,"mtime":1607251506747,"results":"5","hashOfConfig":"6"},{"size":9950,"mtime":1607604000048,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1606980416092,"results":"8","hashOfConfig":"6"},{"size":218,"mtime":1607251654173,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"19pjp54",{"filePath":"13","messages":"14","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"/home/ubuntu/environment/brick-game-champ/src/index.js",[],["20","21"],"/home/ubuntu/environment/brick-game-champ/src/App.js",["22","23","24","25","26"],"import logo from './logo.svg'\nimport _ from 'lodash'\nimport {useState,useEffect} from 'react'\nimport './App.css'\n\n\n// function Button(props){\n//   return(\n//     <>\n//     )\n// }\n\n//It was designed as 20px blocks originate from 0,0\n//available type = apple,block \n\n\nfunction Brick(props){\n  \n  let color\n  switch(props.type){\n    case 'apple':\n      color = 'red'\n      break\n    case 'block':\n      color = 'brown'\n      break\n    case 'head':\n      color = 'green'\n      break\n    default:\n      color = 'limegreen'\n  }\n  \n    return (\n      <g>\n        { props.type==='apple' && < animate attributeType=\"XML\" attributeName=\"opacity\" values=\"1;0\" dur=\"1s\" repeatCount=\"indefinite\"/>}\n        <rect x='2.5' y='2.5' width='15' height='15' fill={color}/>\n        <rect x='0.25' y='0.25' width='19.5' height='19.5' fill='none' stroke={color} strokeWidth='0.5' rx='2.5' ry='2.5'/>\n      </g>)\n}\n\nfunction getRandDiffElem(arr1,arr2){\n  let empty = _.differenceWith(arr1,arr2,_.isEqual)\n  return empty[Math.floor(Math.random() * empty.length)]\n}\n\n \nfunction App() {\n\n  const brickSize = 20\n  const arena = Array(10).fill().map((v,i)=>Array(20).fill().map((v,j)=>[i,j])).flat()\n  const initSnake = [[4,19],[3,19],[2,19]]\n  const enumPhase = ['reset','move','dead']\n  const initBlock = { \n    1: [],\n    2: [[2,2],[2,3],[2,16],[2,17],\n        [3,2],[3,17],[4,9],[4,10],\n        [5,9],[5,10],[6,2],[6,17],\n        [7,2],[7,3],[7,16],[7,17]],\n    3: [[0,9],[0,10],[1,9],[1,10],\n        [4,2],[4,3],[4,16],[4,17],\n        [5,2],[5,3],[5,16],[5,17],\n        [8,9],[8,10],[9,9],[9,10]],\n    4: [[0,2],[1,2],[2,2],[3,2],[4,2],[5,2],[6,2],\n        [3,7],[4,7],[5,7],[6,7],[7,7],[8,7],[9,7],\n        [0,12],[1,12],[2,12],[3,12],[4,12],[5,12],[6,12],\n        [3,17],[4,17],[5,17],[6,17],[7,17],[8,17],[9,17]],\n    5: [[0,0],[0,1],[0,4],[0,15],[0,18],[0,19],[1,4],[1,15],\n        [2,7],[2,12],[3,8],[3,11],[4,9],[4,10],\n        [5,9],[5,10],[6,8],[6,11],[7,7],[7,12],\n        [8,4],[8,15],[9,0],[9,1],[9,4],[9,15],[9,18],[9,19]],\n    6: [[0,2],[0,3],[0,8],[0,9],[0,10],[0,11],[0,16],[0,17],\n        [1,2],[1,3],[1,9],[1,10],[1,16],[1,17],\n        [4,2],[4,3],[4,6],[4,9],[4,10],[4,13],[4,16],[4,17],\n        [5,2],[5,3],[5,6],[5,9],[5,10],[5,13],[5,16],[5,17],\n        [8,2],[8,3],[8,9],[8,10],[8,16],[8,17],\n        [9,2],[9,3],[9,8],[9,9],[9,10],[9,11],[9,16],[9,17]],\n    7: [[0,6],[0,7],[0,12],[0,13],\n        [1,2],[1,6],[1,13],[1,17],\n        [2,1],[2,2],[2,17],[2,18],\n        [3,4],[3,5],[3,9],[3,10],[3,14],[3,15],\n        [4,4],[4,5],[4,8],[4,9],[4,10],[4,11],[4,14],[4,15],\n        [5,4],[5,5],[5,8],[5,9],[5,10],[5,11],[5,14],[5,15],\n        [6,4],[6,5],[6,9],[6,10],[6,14],[6,15],\n        [7,1],[7,2],[7,17],[7,18],\n        [8,2],[8,6],[8,13],[8,17],\n        [9,6],[9,7],[9,12],[9,13]],\n    8: [[0,2],[0,17],\n        [1,2],[1,4],[1,7],[1,12],[1,15],[1,17],\n        [2,4],[2,8],[2,9],[2,10],[2,11],[2,15],\n        [3,2],[3,4],[3,8],[3,11],[3,15],[3,17],\n        [4,1],[4,2],[4,6],[4,13],[4,17],[4,18],\n        [5,1],[5,2],[5,6],[5,13],[5,17],[5,18],\n        [6,2],[6,4],[6,8],[6,11],[6,15],[6,17],\n        [7,4],[7,8],[7,9],[7,10],[7,11],[7,15],\n        [8,2],[8,4],[8,7],[8,12],[8,15],[8,17],\n        [9,2],[9,17]]\n  }\n\n  const [phase,setPhase] = useState('reset') \n  const [level,setLevel] = useState(1)\n  const [block,setBlock] = useState(initBlock[1])\n  \n  const [life,setLife] = useState(4) \n  const [snake,setSnake] = useState(initSnake)\n  \n  const [apple,setApple] = useState(initSnake[0])//WARNING: hackish hiding the apple re-update when the game initialize\n  const [numApple,setNumApple] = useState(0)\n  const [score,setScore] = useState(0)\n  const [highScore,setHighScore] = useState(0)\n  \n  const [direction,setDirection] = useState('E')\n  const [keyFlag,setKeyFlag] = useState(true) //ensure direction change only happen once per frame \n\n   \n  useEffect(() => {\n    let frame\n    if(phase === 'move'){\n      frame = setInterval(() => {\n      \n      let newHead =  _.head(_.cloneDeep(snake))\n      switch(direction){\n        case 'N':\n          newHead[1]-=1\n          break\n        case 'E':\n          newHead[0]+=1\n          break\n        case 'S':\n          newHead[1]+=1\n          break\n        case 'W':\n          newHead[0]-=1\n          break\n        }\n      \n      if(_.findIndex(_.differenceWith(arena,_.concat(_.dropRight(snake),block),_.isEqual),e=>_.isEqual(e,newHead))<0){\n        if(life===1){\n          setLife(life-1)\n          setPhase('dead')\n          if(score > highScore){\n            setHighScore(score)\n          }\n        }else{\n          setLife(life-1)\n          setPhase('reset')\n        }\n      }else if(_.isEqual(newHead,apple)){\n        setScore(score+100)\n        setSnake(_.concat([newHead],snake))\n        if(numApple===21){\n          setNumApple(numApple+1)\n          setLevel(level+1)\n        } else { \n          setApple(getRandDiffElem(arena,_.concat(snake,block,[apple])))\n          setNumApple(numApple+1)\n        }\n      } else { // when the newhead place on top of empty brick\n        setSnake(_.concat([newHead],_.dropRight(snake)))\n      }\n      setKeyFlag(true)\n      }, 200) //minimal time in between movement frames\n    }\n    return () => clearInterval(frame)\n  })\n  \n  \n  // updating on every level change\n  useEffect(()=>{\n    setPhase('reset')\n  },[level])\n  \n  // updating on evey phase change\n  useEffect(()=>{\n    if(phase==='reset'){\n      setTimeout(()=>{\n        setSnake(initSnake)\n        setBlock(initBlock[level])\n        setApple(getRandDiffElem(arena,_.concat(initSnake,initBlock[level])))\n        setNumApple(0)\n        setDirection('E')\n      },1000)\n    }},[phase])\n  \n  useEffect(() => {\n    document.addEventListener(\"keydown\",handleKeyDown)\n    return () => document.removeEventListener(\"keydown\",handleKeyDown)\n  })\n  \n  // manipulating direction based on key stroke\n  const handleKeyDown = (event) =>{\n    if(keyFlag){\n      let newDirection = direction \n      switch(event.key){\n        case 'w':\n          if(direction !== 'S' ) newDirection='N'\n          break\n        case 'd':\n          if(direction !== 'W') newDirection='E'\n          break\n        case 's':\n          if(direction !== 'N') newDirection='S'\n          break\n        case 'a':\n          if(direction !== 'E') newDirection='W'\n          break\n      }\n      if(newDirection!==direction){\n        setDirection(newDirection)\n        setKeyFlag(false)\n  }}}\n  \n  const handleN = (e) => {\n    if(keyFlag){\n      if(_.indexOf(['N','S'],direction)<0){\n        setDirection('N')\n        setKeyFlag(false)\n  }}}\n        \n  const handleS = (e) => {\n    if(keyFlag){\n      if(_.indexOf(['S','N'],direction)<0){\n        setDirection('S')\n        setKeyFlag(false)\n  }}}\n  \n  const handleW = () => {\n    if(keyFlag){\n      if(_.indexOf(['W','E'],direction)<0){\n        setDirection('W')\n        setKeyFlag(false)\n  }}}\n    \n  const handleE = () => {\n    if(keyFlag){\n      if(_.indexOf(['E','W'],direction)<0){\n        setDirection('E')\n        setKeyFlag(false)\n  }}}\n  \n  const handleMain = (e) => {\n    if(phase==='reset'){\n      setTimeout(()=>{\n        setPhase('move')\n      },1000)\n    } else if(phase==='dead'){ //pressing main button when dead\n      setTimeout(()=>{\n        setScore(0)\n        setLife(4)\n      },1000)\n      if(level===1){ //because resetting back to level 1 doesn't change the level\n        setLevel(1)\n        setPhase('reset')\n      } else {\n        setLevel(1)\n      }\n  }}\n  \n  \n  return (\n    <div className=\"App\">\n      <svg width = '375' height= '660'>\n      <rect width = '100%' height= '100%' fill='tomato' stroke = 'black'/>\n        <g transform='translate(40,40)'>\n        <rect x = '2.5' y= '2.5' width='205' height='405' fill='lightcyan' stroke='brown' strokeWidth='5'/>\n        <g transform='translate(5,5)'>\n          {block.map((v,i)=>{\n              return(\n              <g key={[v[0],v[1]]} transform={`translate(${v[0]*brickSize},${v[1]*brickSize}) scale(${brickSize/20})`}>\n                <Brick type= 'block'/>\n              </g>)\n            })}\n        <g transform={`translate(${apple[0]*brickSize},${apple[1]*brickSize}) scale(${brickSize/20})`}>\n              <Brick type='apple'/>\n        </g>\n            {snake.map((v,i)=>{\n              return(\n              <g key={[v[0],v[1]]} transform={`translate(${v[0]*brickSize},${v[1]*brickSize}) scale(${brickSize/20})`}>\n                <Brick type={i===0?'head':'body'}/>\n              </g>)\n            })}\n        </g>\n        <g transform='translate(207.5,2.5)' textAnchor='middle'>\n            <rect width='80' height='210' stroke='brown' strokeWidth='5' fill = 'lightcyan'/>\n            <text x='40' y='20'>SCORE</text>\n            <text x='40' y='40'>{score}</text>\n            <text x='40' y='60'>HI-SCORE</text>\n            <text x='40' y='80'>{highScore}</text>\n            <text x='40' y='100'>GOAL</text>\n            <text x='40' y='120'>{numApple}/22</text>\n            <text x='40' y='140'>LIFE</text>\n            <text x='40' y='160'>{life}</text>\n            <text x='40' y='180'>LEVEL</text>\n            <text x='40' y='200'>{level}/8</text>\n        </g>\n        <rect x='210' y='365' width='85' height='40' fill='#f00' onClick={handleMain}/>\n        </g>\n        \n        <defs>\n        <radialGradient id=\"myGradient\">\n          <stop offset=\"0%\"   stop-color=\"white\" />\n          <stop offset=\"100%\" stop-color=\"yellow\" />\n        </radialGradient>\n        </defs>\n        <g transform='translate(40,450)'>\n          <rect width='210' height='210' fill = 'none' stroke='none'/>\n          <circle className='motion' cx='105' cy='45' r='35' fill=\"url(#myGradient)\" onTouchStart={handleN}/>\n          <circle cx='105' cy='165' r='35' fill='yellow' onTouchStart={handleS}/>\n          <circle cx='45' cy='105' r='35' fill='yellow' onTouchStart={handleW}/>\n          <circle cx='165' cy='105' r='35' fill='yellow'onTouchStart={handleE}/>\n        </g>\n      </svg>\n    </div>\n  )\n}\n\nexport default App","/home/ubuntu/environment/brick-game-champ/src/reportWebVitals.js",[],"/home/ubuntu/environment/brick-game-champ/src/aws-exports.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":1,"column":8,"nodeType":"33","messageId":"34","endLine":1,"endColumn":12},{"ruleId":"31","severity":1,"message":"35","line":53,"column":9,"nodeType":"33","messageId":"34","endLine":53,"endColumn":18},{"ruleId":"36","severity":1,"message":"37","line":122,"column":7,"nodeType":"38","messageId":"39","endLine":135,"endColumn":10},{"ruleId":"40","severity":1,"message":"41","line":183,"column":8,"nodeType":"42","endLine":183,"endColumn":15,"suggestions":"43"},{"ruleId":"36","severity":1,"message":"37","line":194,"column":7,"nodeType":"38","messageId":"39","endLine":207,"endColumn":8},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'enumPhase' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'arena', 'initBlock', 'initSnake', and 'level'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setBlock' needs the current value of 'level'.","ArrayExpression",["46"],"no-global-assign","no-unsafe-negation",{"desc":"47","fix":"48"},"Update the dependencies array to be: [arena, initBlock, initSnake, level, phase]",{"range":"49","text":"50"},[5627,5634],"[arena, initBlock, initSnake, level, phase]"]